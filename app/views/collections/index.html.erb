<script>
	//For live_scaffold.js.erb
	// --get rid of more columns we don't want on the page
	BLACKLIST_KEYS += ['collection_id', 'user_id', 'users_id', 'validated'];
</script>

<h1>Collections and Documents <a href="#" data-reveal-id="about-modal"><i class="fa fa-question-circle"></i></a></h1>

<div id="upload-modal" class="reveal-modal" data-reveal aria-labelledby="modalTitle" aria-hidden="true" role="dialog">
  <div class="modal-header">
    <!--<button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>-->
    <%
    	#Allows us to overrider the return link if we want
    	if !@return_from_upload_link
    		@return_from_upload_link = collections_path
    	end
    %>
    <h3 id="myModalLabel">Data Import <%= link_to "×", @return_from_upload_link %></h3>
  </div>
  <div class="modal-body">
	<%= render "js_upload", :controller => "data_io" %>
  </div>

  <%= link_to "Uploads", uploads_list_path, :class => "btn" %>
</div>

<div class="modal" style="display:none; min-width: 800px;">
  <%= link_to "X", collections_path, :class => "btn btn-danger" %>
    <%= render "js_upload", :controller => "data_io" %>
</div>

<% tree_depth = 0 %>
<div id="about-modal" class="reveal-modal" data-reveal aria-labelledby="modalTitle" aria-hidden="true" role="dialog">
	<h2>Collections and Documents</h2>

    <p><span class="label label-info">Live</span></p>
    <p>Hatch uses its own document data store. Users can upload documents in multiple
      formats, including:
    </p>

    <ul>
      <li>CSV</li>
      <li>text</li>
      <li>SQL (future)</li>
    </ul>

    <p>The raw text from each format is stored in Hatch, and then the user runs filters
      over the data to validate it. Hatch can try to automatically detect which filters
      the data belongs to, or the user can specify which ones to use. Documents can be organized into Hatch Collections (like folders/directories).
      Filters can then be applied over whole Collections, or just individual documents.
    </p>

    <p>Document data can then be easily sortable, searchable, and passed off to 
      visualizations. Documents and Collections are private by default, but users
      can then add individual user collaborators, share with other groups of users
      within projects, or make the documents public to the world.
    </p>

    <p>IFilters are what turn semi-structured data into structured data in Hatch.</p>

    <%= render :partial => "ifilters/ifilters_demo" %>
</div>

<div id="help-modal" class="reveal-modal" data-reveal aria-labelledby="modalTitle" aria-hidden="true" role="dialog">
  <div id="col_popup" class="collapse out">
    <ul>
      <li>Click the "+" symbol to expand the collection view, show sub-collection(s), or see available actions.</li>
      <li>Manage non-data, non-validated files by clicking the "Uploads" button.</li>
      <li>Uploaded note files (pdf, etc.) can be linked to a collection by going to the "Edit" menu.</li>
      <li>Click a collection name to view a specific collection and see more information (owner, notes, etc.)</li>
      <li>Use the "search" field above the document table to filter documents by name (case sensitive).</li>
    </ul>
  </div>
</div>

<a href="#" class="button success" data-reveal-id="upload-modal"><i class="fa fa-cloud-upload"></i> Upload</a>
<a href="<%= new_collection_path %>" class="button success"><i class="fa fa-plus"></i> New Collection</a>
<a href="#" class="button" data-reveal-id="help-modal"><i class="fa fa-question"></i> Help</a>
<a href="<%= jobs_path %>" class="button"><i class="fa fa-spin fa-spinner"></i> Jobs</a>

<hr />

<%= render :partial => "collections/rec_collection_documents_render", 
			:locals => {:root_collections => @root_collections, :tree_depth => tree_depth, :project => @project} %>