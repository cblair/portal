<script>
	//For live_scaffold.js.erb
	// --get rid of more columns we don't want on the page
	BLACKLIST_KEYS += ['collection_id', 'user_id', 'users_id', 'validated'];
</script>

<!-- Modal -->
<div id="myModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="min-width: 800px;">
  <div class="modal-header">
    <!--<button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>-->
    <%
    	#Allows us to overrider the return link if we want
    	if !@return_from_upload_link
    		@return_from_upload_link = collections_path
    	end
    %>
    <%= link_to "×", @return_from_upload_link %>
    <h3 id="myModalLabel">Data Import</h3>
    <button id="data_import_help" class="btn btn-info btn-small" title="Help">Help</button>
    <div id="data_import_popup" hidden>
      <ul>
        <li>Drag and drop files below to quickly add multiple files.</li>
      </ul>
    </div>
  </div>
  <div class="modal-body">
	<%= render "js_upload", :controller => "data_io" %>
  </div>
</div>

<div class="modal" style="display:none; min-width: 800px;">
  <%= link_to "X", collections_path, :class => "btn btn-danger" %>
    <%= render "js_upload", :controller => "data_io" %>
</div>

<% tree_depth = 0 %>

	<h2>Collections</h2>
  <div id="hidden_group">
    <a class="btn btn-info" href="#">More Info</a>
    <a class="btn btn-inverse" href="#">Hide</a>

    <hr />

    <div class="hidden_section">
      <h2>Documents</h2>
      <p><span class="label label-info">Live</span></p>
      <p>Hatch uses its own document data store. Users can upload documents in multiple
        formats, including:
      </p>

      <ul>
        <li>CSV</li>
        <li>text</li>
        <li>SQL (future)</li>
      </ul>

      <p>The raw text from each format is stored in Hatch, and then the user runs filters
        over the data to validate it. Hatch can try to automatically detect which filters
        the data belongs to, or the user can specify which ones to use. Documents can be organized into Hatch Collections (like folders/directories).
        Filters can then be applied over whole Collections, or just individual documents.
      </p>

      <p>Document data can then be easily sortable, searchable, and passed off to 
        visualizations. Documents and Collections are private by default, but users
        can then add individual user collaborators, share with other groups of users
        within projects, or make the documents public to the world.
      </p>

      <p>IFilters are what turn semi-structured data into structured data in Hatch.</p>

      <%= render :partial => "ifilters/ifilters_demo" %>

    </div>
  </div>

	<%= link_to "New Collection", new_collection_path, :class => "btn btn-success" %>
	<a href="#myModal" role="button" class="btn btn-info" data-toggle="modal">Upload files</a>
  <%= link_to "Uploads", uploads_path, :class => "btn" %>
  <button id="col_show_help" class="btn btn-info" data-toggle="collapse" data-target="#col_popup">Help</button>
    <div id="col_popup" class="collapse out">
      <ul>
        <li>Click the "+" symbol to expand the collection view, show sub-collection(s), or see available actions.</li>
        <li>Click a collection name to view a specific collection and see more information (owner, notes, etc.)</li>
        <li>Use the "search" field above the document table to filter documents by name (case sensitive).
      </ul>
    </div>

	<hr />
	<%= render :partial => "collections/rec_collection_documents_render", 
				:locals => {:root_collections => @root_collections, :tree_depth => tree_depth, :project => @project} %>
